"""empty message

Revision ID: e66816c018ca
Revises:
Create Date: 2023-12-22 09:18:20.508604+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "e66816c018ca"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("tg_id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("username", name=op.f("uq_user_username")),
    )
    op.create_index(op.f("ix_user_tg_id"), "user", ["tg_id"], unique=True)
    op.create_table(
        "note",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("body", sa.Text(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_note_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_note")),
        sa.UniqueConstraint("user_id", name=op.f("uq_note_user_id")),
    )
    op.create_table(
        "tag",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_tag_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag")),
        sa.UniqueConstraint("name", name=op.f("uq_tag_name")),
        sa.UniqueConstraint("user_id", name=op.f("uq_tag_user_id")),
    )
    op.create_table(
        "notes_tags",
        sa.Column("note_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["note_id"], ["note.id"], name=op.f("fk_notes_tags_note_id_note")
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tag.id"], name=op.f("fk_notes_tags_tag_id_tag")
        ),
        sa.PrimaryKeyConstraint("note_id", "tag_id", name=op.f("pk_notes_tags")),
    )
    op.drop_table("termins")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "termins",
        sa.Column("term_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("definition", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("term_id", name="pk_termins"),
        sa.UniqueConstraint("title", name="uq_termins_title"),
    )
    op.drop_table("notes_tags")
    op.drop_table("tag")
    op.drop_table("note")
    op.drop_index(op.f("ix_user_tg_id"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
